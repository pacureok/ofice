import { useState, useMemo } from 'react';
import React from 'react'; 

// --- Configuraci√≥n de la Cuadr√≠cula para simular un tama√±o "Infinito" ---
const ROWS = 200; // Filas hacia abajo
const COLS = 70;  // Columnas hacia la derecha (A hasta BR)

// Tipo para almacenar los datos de la hoja de c√°lculo
interface SheetData {
  [key: string]: string; // Clave: "A1", "B2", Valor: Contenido o f√≥rmula
}

// Lista de pesta√±as disponibles en el Ribbon
type RibbonTab = 'Inicio' | 'Insertar' | 'Dibujar' | 'Disposicion' | 'Formulas' | 'Datos' | 'Revisar' | 'Vista' | 'Automatizar' | 'Ayuda';

/**
 * Genera los encabezados de las columnas (A, B, C, AA, AB, ...)
 */
const getColHeaders = (count: number) => {
  const headers: string[] = [];
  for (let i = 0; i < count; i++) {
    let header = '';
    let num = i;
    while (num >= 0) {
      header = String.fromCharCode((num % 26) + 'A'.charCodeAt(0)) + header;
      num = Math.floor(num / 26) - 1;
    }
    headers.push(header);
  }
  return headers;
};

// Expresi√≥n regular para encontrar referencias de celda (Ej: A1, B10, AA1)
const CELL_REFERENCE_REGEX = /([A-Z]+[0-9]+)/g; 

// --- Componente PacurHoja ---
const PacurHoja: React.FC = () => {
  const [data, setData] = useState<SheetData>({});
  const [activeCell, setActiveCell] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<RibbonTab>('Inicio'); // Pesta√±a activa
  const [zoomLevel, setZoomLevel] = useState(100); // Nivel de zoom para la barra de estado
  
  const colHeaders = useMemo(() => getColHeaders(COLS), []);

  // Maneja la entrada de datos en una celda
  const handleCellChange = (key: string, value: string) => {
    setData(prevData => ({
      ...prevData,
      [key]: value
    }));
  };

  /**
   * Resuelve el valor de una celda, buscando referencias circulares si es necesario.
   * Ahora soporta +, -, *, /, y ^ (exponenciaci√≥n) con referencias a otras celdas.
   */
  const calculateValue = (key: string, path: string[] = []): string => {
    const content = data[key] || '';

    // 1. Detectar referencia circular
    if (path.includes(key)) {
      return '#CIRCULAR';
    }

    // 2. Si no es f√≥rmula, devolver el contenido
    if (!content.startsWith('=')) {
      return content;
    }

    const formula = content.substring(1).trim();
    
    // 3. Sustituir referencias de celda por sus valores
    const resolvedFormula = formula.replace(CELL_REFERENCE_REGEX, (match) => {
      const referencedValue = calculateValue(match, [...path, key]);
      
      const numValue = parseFloat(referencedValue);
      
      if (isNaN(numValue)) {
        return '0'; 
      }
      return numValue.toString();
    });

    // 4. Reemplazar el operador de exponenciaci√≥n (^) por **
    const finalFormula = resolvedFormula.replace(/\^/g, '**');

    // 5. Evaluar la f√≥rmula (¬°Advertencia: usar 'eval' en producci√≥n no es seguro!)
    try {
      // Intentar una evaluaci√≥n m√°s segura (aunque sigue siendo eval)
      const result = new Function('return ' + finalFormula)();
      
      if (typeof result === 'number' && !isNaN(result) && isFinite(result)) {
          return result.toFixed(2).replace(/\.00$/, ''); 
      }
      return '#ERROR_MATH';
    } catch (e) {
      return '#F√ìRMULA_INV√ÅLIDA';
    }
  };


  // Funci√≥n para guardar como .aph
  const saveSheet = () => {
    const filename = "hoja_calculo.aph";
    const content = JSON.stringify(data, null, 2); 

    const blob = new Blob([content], { type: 'application/json' }); 
    const a = document.createElement('a');
    a.download = filename;
    a.href = URL.createObjectURL(blob);
    
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    // Utilizamos un mensaje box personalizado
    const messageBox = document.createElement('div');
    messageBox.style.cssText = `
        position: fixed; top: 20px; right: 20px; background-color: #4CAF50; color: white;
        padding: 15px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        z-index: 1000; transition: opacity 0.5s;
    `;
    messageBox.textContent = `¬°Hoja de c√°lculo ${filename} guardada con √©xito!`;
    document.body.appendChild(messageBox);
    setTimeout(() => {
        messageBox.style.opacity = '0';
        setTimeout(() => document.body.removeChild(messageBox), 500);
    }, 3000);
  };

  // Funci√≥n de marcador de posici√≥n para acciones de la barra de herramientas
  const handleToolbarAction = (action: string) => {
    const messageBox = document.createElement('div');
    messageBox.style.cssText = `
        position: fixed; top: 20px; right: 20px; background-color: #0078d4; color: white;
        padding: 10px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        z-index: 1000; transition: opacity 0.5s;
    `;
    messageBox.textContent = `Acci√≥n: ${action} - (L√≥gica no implementada)`;
    document.body.appendChild(messageBox);
    setTimeout(() => {
        messageBox.style.opacity = '0';
        setTimeout(() => document.body.removeChild(messageBox), 1000);
    }, 2000);
  };
  
  // --- Contenido del Ribbon para cada Pesta√±a ---
  const renderRibbonContent = () => {
    switch (activeTab) {
      case 'Inicio':
        return (
          <div className="ribbon-content">
            {/* GRUPO: PORTAPAPELES (Inicio) */}
            <div className="toolbar-group">
                <button onClick={() => handleToolbarAction("Pegar")} title="Pegar" className="large-button">
                    <span style={{fontSize: '1.2rem'}}>üìã</span><br/>Pegar
                </button>
                <div className="vertical-group">
                    <button onClick={() => handleToolbarAction("Cortar")} title="Cortar">‚úÇÔ∏è</button>
                    <button onClick={() => handleToolbarAction("Copiar")} title="Copiar">üìù</button>
                </div>
                <div className="group-label">Portapapeles</div>
            </div>

            {/* GRUPO: FUENTE (Inicio) */}
            <div className="toolbar-group">
                <div className="horizontal-group">
                    <select defaultValue="Aptos Narrow" title="Fuente">
                        <option>Aptos Narrow</option><option>Arial</option><option>Calibri</option>
                    </select>
                    <select defaultValue="11" title="Tama√±o">
                        <option>11</option><option>12</option>
                    </select>
                </div>
                <div className="horizontal-group">
                    <button onClick={() => handleToolbarAction("Negrita")} title="Negrita"><b>N</b></button>
                    <button onClick={() => handleToolbarAction("Cursiva")} title="Cursiva"><i>K</i></button>
                    <button onClick={() => handleToolbarAction("Subrayado")} title="Subrayado"><u>S</u></button>
                    <button onClick={() => handleToolbarAction("Bordes")} title="Bordes de celda">üñºÔ∏è</button>
                    <button onClick={() => handleToolbarAction("Relleno")} title="Color de Relleno">üé®</button>
                    <button onClick={() => handleToolbarAction("Color Fuente")} title="Color de Fuente">üÖ∞Ô∏è</button>
                </div>
                <div className="group-label">Fuente</div>
            </div>

            {/* GRUPO: ALINEACI√ìN (Inicio) */}
            <div className="toolbar-group">
                <div className="vertical-group">
                    <button onClick={() => handleToolbarAction("Alinear Superior")} title="Alinear Arriba">‚¨ÜÔ∏è</button>
                    <button onClick={() => handleToolbarAction("Alinear Medio")} title="Alinear Medio">‚Üî</button>
                    <button onClick={() => handleToolbarAction("Alinear Inferior")} title="Alinear Abajo">‚¨áÔ∏è</button>
                </div>
                <div className="vertical-group">
                    <button onClick={() => handleToolbarAction("Izquierda")} title="Alinear Izquierda">‚è¥</button>
                    <button onClick={() => handleToolbarAction("Centrar")} title="Centrar">‚ò∞</button>
                    <button onClick={() => handleToolbarAction("Derecha")} title="Alinear Derecha">‚èµ</button>
                </div>
                <div className="group-label">Alineaci√≥n</div>
            </div>

            {/* GRUPO: N√öMERO (Inicio) */}
            <div className="toolbar-group">
                <select defaultValue="General" title="Formato de N√∫mero" style={{width: '90px'}}>
                    <option>General</option><option>N√∫mero</option><option>Moneda</option><option>Porcentaje</option>
                </select>
                <div className="horizontal-group">
                    <button onClick={() => handleToolbarAction("Moneda")} title="Formato Moneda">$</button>
                    <button onClick={() => handleToolbarAction("Porcentaje")} title="Estilo Porcentual">%</button>
                    <button onClick={() => handleToolbarAction("Comas")} title="Estilo Millares">, </button>
                </div>
                <div className="group-label">N√∫mero</div>
            </div>

            {/* GRUPO: ESTILOS (Inicio) */}
            <div className="toolbar-group">
                <button onClick={() => handleToolbarAction("Formato Condicional")} title="Formato Condicional">üìä</button>
                <button onClick={() => handleToolbarAction("Dar Formato Como Tabla")} title="Dar Formato como Tabla">üìã</button>
                <button onClick={() => handleToolbarAction("Estilos de Celda")} title="Estilos de Celda">üé®</button>
                <div className="group-label">Estilos</div>
            </div>

            {/* GRUPO: CELDAS (Inicio) */}
            <div className="toolbar-group">
                <button onClick={() => handleToolbarAction("Insertar")} title="Insertar Celdas/Filas">‚ûï</button>
                <button onClick={() => handleToolbarAction("Eliminar")} title="Eliminar Celdas/Filas">‚ûñ</button>
                <button onClick={() => handleToolbarAction("Formato")} title="Formato de Fila/Columna">‚öôÔ∏è</button>
                <div className="group-label">Celdas</div>
            </div>

            {/* GRUPO: EDICI√ìN (Inicio) */}
            <div className="toolbar-group">
                <button onClick={() => handleToolbarAction("Autosuma")} title="Autosuma">Œ£</button>
                <button onClick={() => handleToolbarAction("Ordenar y Filtrar")} title="Ordenar y Filtrar">‚¨áÔ∏è‚¨ÜÔ∏è</button>
                <button onClick={() => handleToolbarAction("Buscar y Seleccionar")} title="Buscar y Seleccionar">üîç</button>
                <div className="group-label">Edici√≥n</div>
            </div>
            
          </div>
        );
      
      case 'Insertar':
        return (
            <div className="ribbon-content">
                {/* GRUPO: TABLAS (Insertar) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Tabla")} title="Tabla" className="large-button">
                        <span style={{fontSize: '1.2rem'}}>üìÖ</span><br/>Tabla
                    </button>
                    <button onClick={() => handleToolbarAction("Tablas Din√°micas")} title="Tablas Din√°micas" className="large-button">
                        <span style={{fontSize: '1.2rem'}}>üóÉÔ∏è</span><br/>Tablas Din√°micas
                    </button>
                    <div className="group-label">Tablas</div>
                </div>
                {/* GRUPO: ILUSTRACIONES (Insertar) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Im√°genes")} title="Im√°genes">üñºÔ∏è</button>
                    <button onClick={() => handleToolbarAction("Formas")} title="Formas">üî∫</button>
                    <button onClick={() => handleToolbarAction("Iconos")} title="Iconos">üåü</button>
                    <div className="group-label">Ilustraciones</div>
                </div>
                {/* GRUPO: GR√ÅFICOS (Insertar) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Gr√°fico")} title="Gr√°ficos Recomendados" className="large-button">
                        <span style={{fontSize: '1.2rem'}}>üìà</span><br/>Gr√°ficos
                    </button>
                    <button onClick={() => handleToolbarAction("Gr√°fico Din√°mico")} title="Gr√°fico Din√°mico" className="large-button">
                        <span style={{fontSize: '1.2rem'}}>üìä</span><br/>Gr√°fico Din√°mico
                    </button>
                    <div className="group-label">Gr√°ficos</div>
                </div>
            </div>
        );
        
      case 'Formulas':
        return (
            <div className="ribbon-content">
                {/* GRUPO: BIBLIOTECA DE FUNCIONES (F√≥rmulas) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Insertar Funci√≥n")} title="Insertar Funci√≥n" className="large-button">
                        <span style={{fontSize: '1.2rem'}}>∆íx</span><br/>Insertar Funci√≥n
                    </button>
                    <button onClick={() => handleToolbarAction("Autosuma")} title="Autosuma" className="large-button">
                        <span style={{fontSize: '1.2rem'}}>Œ£</span><br/>Autosuma
                    </button>
                    <div className="vertical-group">
                        <button onClick={() => handleToolbarAction("Financieras")} title="Financieras">üè¶</button>
                        <button onClick={() => handleToolbarAction("L√≥gicas")} title="L√≥gicas">‚úÖ</button>
                        <button onClick={() => handleToolbarAction("Texto")} title="Texto">A√±</button>
                        <button onClick={() => handleToolbarAction("Matem√°ticas")} title="Matem√°ticas">œÄ</button>
                    </div>
                    <div className="group-label">Biblioteca de funciones</div>
                </div>
                {/* GRUPO: NOMBRES DEFINIDOS (F√≥rmulas) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Administrador de Nombres")} title="Administrador de Nombres">üè∑Ô∏è</button>
                    <button onClick={() => handleToolbarAction("Asignar Nombre")} title="Asignar Nombre">üìù</button>
                    <div className="group-label">Nombres definidos</div>
                </div>
                {/* GRUPO: AUDITOR√çA DE F√ìRMULAS (F√≥rmulas) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Rastrear Precedentes")} title="Rastrear Precedentes">‚¨ÖÔ∏è</button>
                    <button onClick={() => handleToolbarAction("Mostrar F√≥rmulas")} title="Mostrar F√≥rmulas">üìú</button>
                    <button onClick={() => handleToolbarAction("Comprobaci√≥n de Errores")} title="Comprobaci√≥n de Errores">‚ö†Ô∏è</button>
                    <div className="group-label">Auditor√≠a de f√≥rmulas</div>
                </div>
            </div>
        );

      case 'Datos':
        return (
            <div className="ribbon-content">
                {/* GRUPO: OBTENER Y TRANSFORMAR DATOS (Datos) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Obtener Datos")} title="Obtener Datos" className="large-button">
                        <span style={{fontSize: '1.2rem'}}>üíæ</span><br/>Obtener Datos
                    </button>
                    <button onClick={() => handleToolbarAction("Desde Texto/CSV")} title="Desde Texto/CSV">üìÑ</button>
                    <button onClick={() => handleToolbarAction("De la Web")} title="De la Web">üåê</button>
                    <div className="group-label">Obtener y transformar datos</div>
                </div>
                {/* GRUPO: ORDENAR Y FILTRAR (Datos) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Ordenar A-Z")} title="Ordenar A-Z">‚¨áÔ∏è</button>
                    <button onClick={() => handleToolbarAction("Ordenar Z-A")} title="Ordenar Z-A">‚¨ÜÔ∏è</button>
                    <button onClick={() => handleToolbarAction("Filtro")} title="Filtro">üîΩ</button>
                    <div className="group-label">Ordenar y Filtrar</div>
                </div>
                {/* GRUPO: HERRAMIENTAS DE DATOS (Datos) */}
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction("Texto en Columnas")} title="Texto en Columnas">üóíÔ∏è</button>
                    <button onClick={() => handleToolbarAction("Quitar Duplicados")} title="Quitar Duplicados">üóëÔ∏è</button>
                    <div className="group-label">Herramientas de datos</div>
                </div>
            </div>
        );

      default:
        // Pesta√±as con contenido b√°sico o no implementado
        return (
            <div className="ribbon-content">
                <div className="toolbar-group">
                    <button onClick={() => handleToolbarAction(`Acci√≥n en ${activeTab}`)} title={`Acci√≥n en ${activeTab}`} className="large-button">
                        <span style={{fontSize: '1.2rem'}}>üõ†Ô∏è</span><br/>{activeTab}
                    </button>
                    <div className="group-label">Contenido B√°sico</div>
                </div>
            </div>
        );
    }
  };


  return (
    <div className="pacur-hoja-container">
      
      {/* 1. Barra de Herramientas (Ribbon COMPLETO) */}
      <div className="toolbar ribbon">
        {/* Pesta√±as (Simulaci√≥n) */}
        <div className="ribbon-tabs">
            {['Inicio', 'Insertar', 'Dibujar', 'Disposicion', 'Formulas', 'Datos', 'Revisar', 'Vista', 'Automatizar', 'Ayuda'].map(tab => (
                 <span 
                    key={tab}
                    className={`ribbon-tab ${activeTab === tab ? 'active' : ''}`}
                    onClick={() => setActiveTab(tab as RibbonTab)}
                >
                    {tab}
                </span>
            ))}
            
            {/* Botones de Compartir/Comentarios */}
            <div style={{marginLeft: 'auto', display: 'flex', gap: '10px'}}>
                <button onClick={() => handleToolbarAction("Comentarios")} title="Comentarios">üí¨ Comentarios</button>
                <button onClick={() => handleToolbarAction("Compartir")} title="Compartir" style={{backgroundColor: '#107c41', color: 'white'}}>
                    üì§ Compartir
                </button>
                {/* Bot√≥n de Guardar */}
                <button onClick={saveSheet} title="Guardar como .aph" style={{backgroundColor: '#0078d4'}}>üíæ</button>
            </div>
        </div>

        {/* Contenido de la Pesta√±a Activa */}
        {renderRibbonContent()}
      </div>

      {/* 2. Barra de F√≥rmulas */}
      <div className="formula-bar">
        <div className="cell-name-box">
            {activeCell || 'A1'}
        </div>
        <input 
            type="text" 
            placeholder="F√≥rmula o valor" 
            value={activeCell ? data[activeCell] || '' : ''}
            onChange={(e) => activeCell && handleCellChange(activeCell, e.target.value)}
            className="formula-input"
        />
      </div>

      {/* 3. Cuadr√≠cula de la Hoja de C√°lculo */}
      <div className="spreadsheet-grid" style={{transform: `scale(${zoomLevel / 100})`, transformOrigin: 'top left'}}>
        <div className="header-row">
          <div className="cell header-cell corner-cell"></div>
          {colHeaders.map(header => (
            <div key={header} className="cell header-cell">{header}</div>
          ))}
        </div>

        {Array.from({ length: ROWS }, (_, rIndex) => (
          <div key={rIndex} className="data-row">
            <div className="cell header-cell">{(rIndex + 1)}</div>
            
            {colHeaders.map(cHeader => {
              const cellKey = `${cHeader}${rIndex + 1}`;
              const displayValue = calculateValue(cellKey);
              
              return (
                <div 
                  key={cellKey}
                  className={`cell data-cell ${activeCell === cellKey ? 'active' : ''}`}
                  onClick={() => setActiveCell(cellKey)}
                >
                  {displayValue}
                </div>
              );
            })}
          </div>
        ))}
      </div>
      
      {/* 4. Barra de Estado (Parte Inferior) */}
      <div className="status-bar">
        <div className="status-left">
            <span>Listo</span>
            <div className="sheet-tabs">
                <span className="sheet-tab active-sheet">Hoja1</span>
                <button onClick={() => handleToolbarAction("A√±adir Hoja")} title="Nueva Hoja">‚ûï</button>
            </div>
        </div>
        <div className="status-right">
            <button onClick={() => handleToolbarAction("Vista Normal")} title="Vista Normal">üìÑ</button>
            <button onClick={() => handleToolbarAction("Vista Dise√±o")} title="Vista Dise√±o de p√°gina">üìë</button>
            <button onClick={() => handleToolbarAction("Vista Salto de p√°gina")} title="Vista previa de salto de p√°gina">üéöÔ∏è</button>

            <div className="zoom-control">
                <button onClick={() => setZoomLevel(Math.max(10, zoomLevel - 10))} title="Alejar">‚ûñ</button>
                <span>{zoomLevel}%</span>
                <button onClick={() => setZoomLevel(Math.min(200, zoomLevel + 10))} title="Acercar">‚ûï</button>
            </div>
        </div>
      </div>
    </div>
  );
};

export default PacurHoja;
